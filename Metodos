#Integrantes: Jesus Miguel Gonzalez Tziu y Martin Alejandro Tec Cupul
import numpy as np

class Metodos:
    def f(self, a):
        return 6*a**3-5*a**2+7*a-2;
    def df(self, a):
        return 18*a**2-10*a+7;

    def Biseccion(self, a, b, tol):
        m1 = a;
        m = b;
        k = 0;
        if (self.f(a) * self.f(b) > 0):
            print('la funcion no cambia de signo')

        while (abs(m1 - m) > tol):
            m1 = m;
            m = (a + b) / 2;
            if (self.f(a) * self.f(m) < 0):
                b = m;
            if (self.f(m) * self.f(b) < 0):
                a = m;
            print('El intervalo es[', a, ',', b, ']')
            k = k + 1;
        print('x', k, '=', m, ' es una buena aproximación')

    def NewtonRaphson(self, a, tol, n):
        for k in range(n):
            x1 = a - self.f(a) / self.df(a)
            if abs(x1 - a) < tol:
                print('x', k + 1, '=', x1, ' es la raiz')
                return
            a = x1
            print('x', k + 1, '=', x1)

    def MetodoSecante(self, x0, x1, tol):
        error = 1
        i = 1
        while error > tol:
            xr = x1 - ((self.f(x1) * (x1 - x0)) / (self.f(x1) - self.f(x0)))
            error = np.abs((xr - x1) / xr)
            x0 = x1
            x1 = xr
            i += 1
            print('x', i - 1, '=', xr, ' es la raiz')


Mbiseccion=Metodos()
print('Metodo por Bisección')
Mbiseccion.Biseccion(0,1,0.001)
print('==================================================')
print('Metodo por Newton Raphson')
Mbiseccion.NewtonRaphson(0,0.001,10)
print('==================================================')
print('Metodo por Secante')
Mbiseccion.MetodoSecante(0,1,0.001)
